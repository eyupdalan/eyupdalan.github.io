{"version":3,"sources":["redux/actions/questionActions.js","redux/reducers/questionsReducer.js","redux/mainReducer.js","components/Menu/index.js","components/Question/index.js","components/Timer/index.js","components/Game/index.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["CREATE_QUESTION","CHECK_ANSWER","DECREASE_TIMER","RESET_GAME","createQuestion","type","checkAnswer","choice","payload","decreaseTimer","resetGame","gameState","time","step","question","choices","correctAnswer","point","operations","selectedOperationIndex","Math","floor","random","selectedOperation","firstParameter","secondParameter","answer","tempFirstParameter","toString","getShuffledArray","state","arr","length","rand","concat","Object","toConsumableArray","filter","_","i","combineReducers","questionsReducer","arguments","undefined","action","newState","assign","Menu","onClickStart","_this","props","history","push","react_default","a","createElement","Card_default","Button_default","variant","onClick","this","Component","withRouter","Question","createOnClickFunction","onClickChoice","_this2","map","className","key","size","renderChoices","defaultProps","Timer","timer","setInterval","clearInterval","Badge_default","Game","timerEndHandler","actions","Timer_Timer","Question_Question","connect","dispatch","bindActionCreators","objectSpread","questionActions","App","es","store","createStore","mainReducer","BrowserRouter","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b89014c.chunk.js","sourcesContent":["export const CREATE_QUESTION = \"CREATE_QUESTION\";\r\nexport const CHECK_ANSWER = \"CHECK_ANSWER\";\r\nexport const DECREASE_TIMER = \"DECREASE_TIMER\";\r\nexport const RESET_GAME = \"RESET_GAME\";\r\n\r\nexport function createQuestion() {\r\n\treturn {\r\n\t\ttype: CREATE_QUESTION\r\n\t}\r\n}\r\n\r\nexport function checkAnswer(choice) {\r\n\treturn {\r\n\t\ttype: CHECK_ANSWER,\r\n\t\tpayload: choice\r\n\t}\r\n}\r\n\r\nexport function decreaseTimer() {\r\n\treturn {\r\n\t\ttype: DECREASE_TIMER\r\n\t}\r\n}\r\n\r\nexport function resetGame() {\r\n\treturn {\r\n\t\ttype: RESET_GAME\r\n\t}\r\n}","import {CREATE_QUESTION, CHECK_ANSWER, DECREASE_TIMER, RESET_GAME} from \"../actions/questionActions\";\r\n\r\nconst gameState = {\r\n\ttime: 5,\r\n\tstep: 1,\r\n\tquestion: \"\",\r\n\tchoices: [],\r\n\tcorrectAnswer: \"\",\r\n\tpoint: 0\r\n};\r\n\r\nconst operations = [\"+\", \"-\", \"*\"];\r\n\r\nexport default (state = gameState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase CREATE_QUESTION: {\r\n\t\t\tconst question = createQuestion();\r\n\t\t\tconst newState = Object.assign({}, state);\r\n\t\t\tnewState.question = question.question;\r\n\t\t\tnewState.choices = question.choices;\r\n\t\t\tnewState.correctAnswer = question.correctAnswer;\r\n\t\t\tnewState.time = 5;\r\n\t\t\treturn newState;\r\n\t\t}\r\n\t\tcase CHECK_ANSWER: {\r\n\t\t\tstate = checkAnswer(state, action.payload);\r\n\t\t\treturn Object.assign({}, state);\r\n\t\t}\r\n\t\tcase DECREASE_TIMER: {\r\n\t\t\tlet newState = Object.assign({}, state);\r\n\t\t\tif(newState.time===0){\r\n\t\t\t\tnewState = checkAnswer(newState, -1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnewState.time--;\r\n\t\t\t}\r\n\t\t\treturn newState;\r\n\t\t}\r\n\t\tcase RESET_GAME:{\r\n\t\t\treturn gameState;\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nfunction createQuestion() {\r\n\tconst selectedOperationIndex = Math.floor(Math.random() * 3);\r\n\tconst selectedOperation = operations[selectedOperationIndex];\r\n\r\n\tlet firstParameter = Math.floor(Math.random() * 9) + 1;\r\n\tlet secondParameter = Math.floor(Math.random() * 9) + 1;\r\n\twhile (firstParameter === secondParameter) {\r\n\t\tsecondParameter = Math.floor(Math.random() * 9) + 1;\r\n\t}\r\n\r\n\tlet answer = 0;\r\n\tif (selectedOperation === \"+\") {\r\n\t\tanswer = firstParameter + secondParameter;\r\n\t} else if (selectedOperation === \"-\") {\r\n\t\tif (firstParameter < secondParameter) {\r\n\t\t\tlet tempFirstParameter = firstParameter;\r\n\t\t\tfirstParameter = secondParameter;\r\n\t\t\tsecondParameter = tempFirstParameter;\r\n\t\t}\r\n\r\n\t\tanswer = firstParameter - secondParameter;\r\n\t} else if (selectedOperation === \"*\") {\r\n\t\tanswer = firstParameter * secondParameter;\r\n\t}\r\n\r\n\tconst questionString = firstParameter.toString() + selectedOperation + secondParameter.toString()+\" = ?\";\r\n\tconst choices = getShuffledArray([firstParameter.toString() + secondParameter.toString(), secondParameter.toString() + firstParameter.toString(), answer]);\r\n\r\n\treturn {\r\n\t\tquestion: questionString,\r\n\t\tcorrectAnswer: answer,\r\n\t\tchoices: choices\r\n\t}\r\n}\r\n\r\nfunction checkAnswer(state, choice) {\r\n\tstate.step++;\r\n\tif (state.correctAnswer === choice) {\r\n\t\tstate.point += 10;\r\n\t} else {\r\n\t\tstate.point -= 10;\r\n\t}\r\n\r\n\tconst question = createQuestion();\r\n\tstate.question = question.question;\r\n\tstate.choices = question.choices;\r\n\tstate.correctAnswer = question.correctAnswer;\r\n\tstate.time = 5;\r\n\treturn state;\r\n}\r\n\r\nconst getShuffledArray = arr => {\r\n\tif (arr.length === 1) {\r\n\t\treturn arr\r\n\t}\r\n\tconst rand = Math.floor(Math.random() * arr.length);\r\n\treturn [arr[rand], ...getShuffledArray(arr.filter((_, i) => i !== rand))];\r\n};\r\n","import {combineReducers} from \"redux\";\r\nimport questionsReducer from \"./reducers/questionsReducer\";\r\n\r\nexport default combineReducers({\r\n\tquestionsReducer\r\n});\r\n","import React, {Component} from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\n\r\nclass Menu extends Component {\r\n\tonClickStart = () => {\r\n\t\tthis.props.history.push(\"/game\");\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Card>\r\n\t\t\t\t<Button variant=\"success\" onClick={this.onClickStart}>\r\n\t\t\t\t\tStart\r\n\t\t\t\t</Button>\r\n\t\t\t</Card>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withRouter(Menu);","import \"./question.css\";\r\nimport React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default class Question extends Component {\r\n\tstatic propTypes = {\r\n\t\tquestion: PropTypes.string,\r\n\t\tchoices: PropTypes.array,\r\n\t\tonClickChoice: PropTypes.func\r\n\t};\r\n\r\n\tstatic defaultProps = {\r\n\t\tquestion: \"\",\r\n\t\tchoices: []\r\n\t};\r\n\r\n\tcreateOnClickFunction = (choice) => {\r\n\t\treturn () => {\r\n\t\t\tthis.props.onClickChoice(choice);\r\n\t\t}\r\n\t};\r\n\r\n\trenderChoices() {\r\n\t\treturn this.props.choices.map(choice => {\r\n\t\t\treturn (\r\n\t\t\t\t<div className={\"choice\"} key={choice}>\r\n\t\t\t\t\t<Button variant=\"outline-dark\" size={\"lg\"} className={\"choice-button\"}\r\n\t\t\t\t\t\t\tonClick={this.createOnClickFunction(choice)}>\r\n\t\t\t\t\t\t{choice}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Card className={\"question-card\"}>\r\n\t\t\t\t<div className={\"question\"}>\r\n\t\t\t\t\t{this.props.question}\r\n\t\t\t\t</div>\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<div className={\"choices\"}>\r\n\t\t\t\t\t{this.renderChoices()}\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\t\t);\r\n\t}\r\n}","import \"./timer.css\";\r\nimport React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nexport default class Timer extends Component {\r\n\tstatic propTypes={\r\n\t\ttime: PropTypes.number,\r\n\t\tdecreaseTimer:PropTypes.func,\r\n\t\ttimerEndHandler:PropTypes.func\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.timer = setInterval(this.props.decreaseTimer, 1000);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.timer);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={\"game-timer\"}>\r\n\t\t\t\t<Button variant=\"danger\" className={\"timer-button\"}>\r\n\t\t\t\t\t<Badge variant=\"light\">{this.props.time}</Badge>\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","import \"./game.css\";\r\nimport React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport * as questionActions from \"../../redux/actions/questionActions\";\r\nimport Question from \"../Question\";\r\nimport Timer from \"../Timer\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nclass Game extends Component {\r\n\tcomponentWillMount() {\r\n\t\tthis.props.actions.createQuestion();\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.props.actions.resetGame();\r\n\t}\r\n\r\n\ttimerEndHandler = () => {\r\n\t\tif (this.props.question.time===0) {\r\n\t\t\tthis.props.history.push(\"/\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.props.actions.decreaseTimer();\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={\"game\"}>\r\n\t\t\t\t<div className={\"game-stat\"}>\r\n\t\t\t\t\t<Button variant=\"primary\" className={\"game-stat-button\"}>\r\n\t\t\t\t\t\tPoint <Badge variant=\"light\">{this.props.question.point}</Badge>\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button variant=\"primary\" className={\"game-stat-button\"}>\r\n\t\t\t\t\t\tStep <Badge variant=\"light\">{this.props.question.step}</Badge>\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Timer time={this.props.question.time} decreaseTimer={this.timerEndHandler}/>\r\n\t\t\t\t<Question question={this.props.question.question}\r\n\t\t\t\t\t\t  choices={this.props.question.choices} onClickChoice={this.props.actions.checkAnswer}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tquestion: state.questionsReducer\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\tactions: bindActionCreators({\r\n\t\t...questionActions\r\n\t}, dispatch)\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Game));","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport configureStore from \"./redux/configureStore\";\n\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Menu from \"./components/Menu\";\nimport Game from \"./components/Game\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Provider store={configureStore()}>\n\t\t\t\t<Router>\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<Route path=\"/\" exact component={Menu}/>\n\t\t\t\t\t\t<Route path=\"/game/\" component={Game}/>\n\t\t\t\t\t</div>\n\t\t\t\t</Router>\n\t\t\t</Provider>\n\t\t);\n\t}\n}\n\nexport default App;\n","import {createStore} from \"redux\";\r\nimport mainReducer from \"./mainReducer\";\r\n\r\nexport default function configureStore() {\r\n\treturn createStore(mainReducer);\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif (module.hot) {\n\tmodule.hot.accept('./App', () => {\n\t\tconst NextApp = require('./App').default;\n\t\tReactDOM.render(<NextApp/>, document.getElementById('root'));\n\t});\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}